ClubMaster
==========
:Author:    Michael Holm Kristensen
:Email:     <hollo@hollo.dk>
:Date:      2012-02-02
:Revision:  18


Feedback
--------
It would really help me a lot of you can give me just any feedback at hollo@hollo.dk.


Prerequirements
---------------
In order to run this software you need to following prerequirements:

- Webserver
- PHP 5.3.2
- MySQL 5

Besides it higly suggested to:

- Enable mod_rewrite for apache
- AllowOverride All in your apache configuration


Quickstart
----------

If you just want to be up and running and have access to the shell, here is what you have to do:

  cd /var/www
  tar xzf clubmaster-XXX.tgz
  cd clubmaster-XXX
  vim app/config/parameters.ini
  ./install.sh

Now browse to:

http://localhost/clubmaster/web/check.php


Manual Installation
-------------------

If you dont have access to the shell, then you have to do then manual installation.


Get the archive
---------------

First get the archive from our website http://www.clubmaster.org.

Now extract the archive some place that your webserver can see.

Go to the newly created folder clubmaster/.


Edit configuration
------------------

Edit the file app/config/parameters.yml to fit to your needs.


Create database
---------------

First manually create the database that you want to use:

$ mysql -u root -e"CREATE DATABASE clubmaster"

Now when the database is in place, import the schema files located in the folder app/sql/.

$ mysql -u root clubmaster < app/sql/install.sql


File permissions
----------------

Before you can complete the installation online, you have to make some files writeable for the webserver, do the following:

$ chmod -R 777 app/cache app/logs web/uploads


Complete installation
---------------------

Now your installation is in place, go to this url an follow the onscreen installation:

http://localhost/clubmaster/web/check.php

That page will tell you everything you will need to know in order to get up and running.


Upgrade
-------

In order to upgrade from a previous installation:

- Backup your current database and files.
- Extract the new clubmaster package in a new directory
- Copy app/config/parameters.ini file from old directory
- Make sure any changes you have made to app/config/clubmaster.yml is moved
- $ chmod 777 -R app/cache app/logs in the new clubmaster installation
- Go to the website, http://localhost/clubmaster/web/upgrade
- Empty the cache, rm -rf app/cache/*


Development
-----------

If you want to support the system and help developing it, you are so welcome. All you have to know about getting started with development can you read about in this section.

First of all, ClubMaster is written in Symfony2, you can read all about the framework on www.symfony.com, its a great PHP framework to ease development of PHP projects. Take a good look at the framework before you go any further, that is a really important step.

Afterwards, if you just want to get up and running in a development environment all you have to do is:


Fork on GitHub
~~~~~~~~~~~~~~

Make a fork of our project on GitHub, https://www.github.com/clubmaster/clubmaster.

Follow the help provided by github.


Get dependencies
~~~~~~~~~~~~~~~~

To get all dependencies of the project, run the following command:

php bin/vendors install


Initialize data
~~~~~~~~~~~~~~~

I have made a shell script to prepare the database schema, and load some test data. Just run the following script and see the onscreen magic :)

./bin/remake_schema.sh


Start coding
~~~~~~~~~~~~

When you are developing in Symfony2 there are multiple environmens:

Production where you have enabled all the cache, and everything is optimized for optimal performance.

Development where you have disabled a lot of caching, and get a nice web debugging tool to see what you application does behind the scene.

To load the different environments go the the one url or the other:

Production:
http://localhost/clubmaster/web/index.php

Development:
http://localhost/clubmaster/web/index_dev.php


Login
~~~~~

As in the demo project, just log in with:

Administrator user:
username: 10
password: 1234

Normal user:
username: 1
password: 1234


API
---

We have developed an API which is open for everyone. However the API has some limitations what security is conserned. Some functions is locked with basic access authentication other functions is locked with an API key. More about that under each function section.

The API key is a value defined in the application in the file:

/app/config/clubmaster.yml

Then you have to use the API key, simply set a header values in your request, API_KEY and with the value of the API key.


Here is 2 different usages of the API, first we will fetch all users afterwards we will attend an event.

When you want to fetch all users, we dont want this method to be public so thats why you have to use the API key, watch this curl example.

curl -H "API_KEY:YOUR_KEY" http://example.com/api/users/

If you want to attend an event, you dont get access to any sensitive data, so you dont have to apply the API key, simple do a basic access authentication before the login with the users credentials.

curl -u "user:password" http://example.com/api/events/{id}/attend

That pretty much all you need to know before you can use our API.

Date format
~~~~~~~~~~~

Date format will always be transmitted in ISO 8601 format.

You can read about it here:

http://en.wikipedia.org/wiki/ISO_8601


Validate authentication
~~~~~~~~~~~~~~~~~~~~~~~
URL: /api/auth
Method: ANY

Success response will be HTTP response code 200, and a json response with specified user
Failure response will be HTTP response code 403


Get all events
~~~~~~~~~~~~~~
URL: /api/events/
Method: GET

Success response will be HTTP response code 200, and a json response with all events


Attend event
~~~~~~~~~~~~
URL: /api/events/{id}/attend
Method: POST

Use basic access authentication for the user who has to authenticate.
Success response will be HTTP response code 200


Unattend event
~~~~~~~~~~~~~~
URL: /api/events/{id}/unattend
Method: POST

Use basic access authentication for the user who has to authenticate.
Success response will be HTTP response code 200


Get all users
~~~~~~~~~~~~~
URL: /api/users/
Method: GET
Header: API_KEY

Success response will be HTTP response code 200, and a json response with all users


Get user
~~~~~~~~
URL: /api/users/{id}
Method: GET
Header: API_KEY

Success response will be HTTP response code 200, and a json response with specified user


Get all teams
~~~~~~~~~~~~~
URL: /api/teams/
URL: /api/teams/{start}
URL: /api/teams/{start}/{end}
Method: GET

Parameters:
{start}: 2011-01-01
{end}: 2011-01-02

Success response will be HTTP response code 200, and a json response with all teams


Get users teams
~~~~~~~~~~~~~~~
URL: /api/users/teams/
URL: /api/users/teams/{start}
URL: /api/users/teams/{start}/{end}
Method: GET

Parameters:
{start}: 2011-01-01
{end}: 2011-01-02

Success response will be HTTP response code 200, and a json response with all teams


Attend team
~~~~~~~~~~~
URL: /api/teams/{id}/attend
Method: POST

Use basic access authentication for the user who has to authenticate.
Success response will be HTTP response code 200


Unattend team
~~~~~~~~~~~~~
URL: /api/teams/{id}/unattend
Method: POST

Use basic access authentication for the user who has to authenticate.
Success response will be HTTP response code 200


Participant team
~~~~~~~~~~~~~~~~
URL: /api/teams/participant
Method: ANY
Header: API_KEY

Use basic access authentication for the user who has to authenticate.
Success response will be HTTP response code 200


Get locations
~~~~~~~~~~~~~
URL: /api/locations/
Method: GET

Success response will be HTTP response code 200, and a json response with all locations


Get fields
~~~~~~~~~~
URL: /api/fields/{location_id}
URL: /api/fields/{location_id}/{date}
Method: GET

Parameters:
{date}: 2011-01-01

Success response will be HTTP response code 200, and a json response with all fields in a location


Get bookings
~~~~~~~~~~~~
URL: /api/bookings/{location_id}
URL: /api/bookings/{location_id}/{date}
Method: GET

Parameters:
{date}: 2011-01-01

Success response will be HTTP response code 200, and a json response with all used intervals


Make booking
~~~~~~~~~~~~
URL: /api/bookings/book/{date}/{interval_id}/{user_id}
URL: /api/bookings/book/{date}/{interval_id}/guest
Method: POST

Parameters:
{date}: 2011-01-01

Use basic access authentication for the user who has to authenticate.
Success response will be HTTP response code 200 and json response with booking object


Cancel booking
~~~~~~~~~~~~~~
URL: /api/bookings/cancel/{id}
Method: POST

Use basic access authentication for the user who has to authenticate.
Success response will be HTTP response code 200


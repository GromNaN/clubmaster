<?php

namespace Club\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * User
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class User extends EntityRepository
{
  public function findNextMemberNumber()
  {
    $dql = "SELECT u FROM ClubUserBundle:User u ORDER BY u.member_number DESC";

    $query = $this->_em->createQuery($dql);
    $query->setMaxResults(1);

    $r = $query->getResult();

    if (!count($r)) return 1;
    return $r[0]->getMemberNumber()+1;
  }

  public function getUsersListWithPagination($filter, $order_by = array(), $offset = 0, $limit = 0) {
    //Create query builder for languages table
    $qb = $this->getQueryBuilderByFilter($filter);

    //Show all if offset and limit not set, also show all when limit is 0
    if ((isset($offset)) && (isset($limit))) {
      if ($limit > 0) {
        $qb->setFirstResult($offset);
        $qb->setMaxResults($limit);
      }
      //else we want to display all items on one page
    }
    //Adding defined sorting parameters from variable into query
    foreach ($order_by as $key => $value) {
      $qb->add('orderBy', 'u.' . $key . ' ' . $value);
    }
    //Get our query
    $q = $qb->getQuery();
    //Return result
    return $q->getResult();
  }

  public function getUsersCount($filter) {
    $qb = $this->getQueryBuilderByFilter($filter);
    return count($qb->getQuery()->getResult());
  }

  protected function getQueryBuilderByFilter(\Club\UserBundle\Entity\Filter $filter)
  {
    $qb = $this->getQueryBuilder();

    // boolean to make sure we dont join address table twice
    $this->has_joined_addr = false;

    foreach ($filter->getAttributes() as $attr) {
      if ($attr->getValue() != '') {
        switch ($attr->getAttribute()->getAttributeName()) {
        case 'name':
          $qb = $this->filterName($qb,$attr->getValue());
          break;
        case 'member_number':
          $qb = $this->filterMemberNumber($qb,$attr->getValue());
          break;
        case 'min_age':
          $qb = $this->filterMinAge($qb,$attr->getValue());
          break;
        case 'max_age':
          $qb = $this->filterMaxAge($qb,$attr->getValue());
          break;
        case 'gender':
          $qb = $this->filterGender($qb,$attr->getValue());
          break;
        case 'postal_code':
          $qb = $this->filterPostalCode($qb,$attr->getValue());
          break;
        case 'city':
          $qb = $this->filterCity($qb,$attr->getValue());
          break;
        case 'country':
          $qb = $this->filterCountry($qb,$attr->getValue());
          break;
        case 'is_active':
          $qb = $this->filterIsActive($qb,$attr->getValue());
          break;
        case 'has_ticket':
          $qb = $this->filterHasTicket($qb,$attr->getValue());
          break;
        case 'has_subscription':
          $qb = $this->filterHasSubscription($qb,$attr->getValue());
          break;
        case 'location':
          $qb = $this->filterLocation($qb,explode(",", $attr->getValue()));
          break;
        }
      }
    }

    return $qb;
  }

  protected function getQueryByFilter(\Club\UserBundle\Entity\Filter $filter)
  {
    return $this->getQueryBuilderByFilter($filter)->getQuery();
  }

  public function getQueryByGroup(\Club\UserBundle\Entity\Group $group)
  {
    $qb = $this->getQueryBuilder();

    if ($group->getGender() != '') {
      $qb = $this->filterGender($qb,$group->getGender());
    }

    if ($group->getMinAge() != '') {
      $qb = $this->filterMinAge($qb,$group->getMinAge());
    }

    if ($group->getMaxAge() != '') {
      $qb = $this->filterMaxAge($qb,$group->getMaxAge());
    }

    if ($group->getIsActiveMember()) {
      $qb = $this->filterIsActive($qb,true);
    }

    if (count($group->getLocation()) > 0) {
      $location_arr = array();
      foreach ($group->getLocation() as $location) {
        $location_arr[] = $location->getId();
      }
      $qb = $this->filterLocation($qb,$location_arr);
    }

    return $qb->getQuery();
  }

  protected function getQueryBuilder()
  {
    return $this->_em->createQueryBuilder()
      ->select('u')
      ->from('ClubUserBundle:User','u')
      ->leftJoin('u.profile','p');
  }

  protected function filterName($qb,$value)
  {
    $qb->andWhere('(p.first_name = :name OR p.last_name = :name)');
    $qb->setParameter('name', $value);

    return $qb;
  }

  protected function filterMemberNumber($qb,$value)
  {
    $qb->andWhere(
      $qb->expr()->eq('u.member_number',':number')
    );
    $qb->setParameter('number', $value);

    return $qb;
  }

  protected function filterMinAge($qb,$value)
  {
    $qb->andWhere(
      $qb->expr()->lte('p.day_of_birth',':min_age')
    );
    $qb->setParameter('min_age', date('Y-m-d',mktime(0,0,0,date('n'),date('j'),date('Y')-$value)));

    return $qb;
  }

  protected function filterMaxAge($qb,$value)
  {
    $qb->andWhere(
      $qb->expr()->gte('p.day_of_birth',':max_age')
    );
    $qb->setParameter('max_age', date('Y-m-d',mktime(0,0,0,date('n'),date('j'),date('Y')-$value)));

    return $qb;
  }

  protected function filterGender($qb,$value)
  {
    $qb->andWhere(
      $qb->expr()->eq('p.gender',':gender')
    );
    $qb->setParameter('gender', $value);

    return $qb;
  }

  protected function filterPostalCode($qb,$value)
  {
    if (!$this->has_joined_addr) {
      $qb->join('p.profile_address','pa');
      $this->has_joined_addr = true;
    }

    $qb->andWhere(
      $qb->expr()->eq('pa.postal_code',':postal_code')
    );
    $qb->setParameter('postal_code', $value);

    return $qb;
  }

  protected function filterCity($qb,$value)
  {
    if (!$this->has_joined_addr) {
      $qb->join('p.profile_address','pa');
      $this->has_joined_addr = true;
    }

    $qb->andWhere(
      $qb->expr()->eq('pa.city',':city')
    );
    $qb->setParameter('city', $value);

    return $qb;
  }

  protected function filterCountry($qb,$value)
  {
    if (!$this->has_joined_addr) {
      $qb->join('p.profile_address','pa');
      $this->has_joined_addr = true;
    }

    $qb->andWhere(
      $qb->expr()->eq('pa.country',':country')
    );
    $qb->setParameter('country', $value);

    return $qb;
  }

  protected function filterIsActive($qb,$value)
  {
    if ($value) {
      $qb->leftJoin('u.subscriptions','s1');
      $qb->andWhere('(((s1.start_date <= :sds AND s1.expire_date >= :eds) OR s1.expire_date IS NULL) AND s1.is_active = :is_active)');
      $qb->setParameter('is_active',1);
      $qb->setParameter('sds',date('Y-m-d'));
      $qb->setParameter('eds',date('Y-m-d'));
    }

    return $qb;
  }

  protected function filterHasTicket($qb,$value)
  {
    $qb->leftJoin('u.subscriptions','s3');
    if ($value) {
      $qb->andWhere('s3.type = :type');
    } else {
      $qb->andWhere('s3.type <> :type');
    }
    $qb->setParameter('type','ticket');

    return $qb;
  }

  protected function filterHasSubscription($qb,$value)
  {
    $qb->leftJoin('u.subscriptions','s4');
    if ($value) {
      $qb->andWhere('s4.type = :type');
    } else {
      $qb->andWhere('s4.type <> :type');
    }
    $qb->setParameter('type','subscription');

    return $qb;
  }

  protected function filterLocation($qb,array $value)
  {
    $locations = array();
    foreach ($value as $id) {
      // FIXME, has to be infinitive loop
      $location = $this->_em->find('ClubUserBundle:Location',$id);
      $locations[] = $location->getId();

      if ($location->getLocation()) {
        $locations[] = $location->getLocation()->getId();

        if ($location->getLocation()->getLocation()) {
          $locations[] = $location->getLocation()->getLocation()->getId();

          if ($location->getLocation()->getLocation()->getLocation()) {
            $locations[] = $location->getLocation()->getLocation()->getLocation()->getId();
          }
        }
      }
    }

    $str = "";
    foreach ($locations as $id) {
      $str .= " sa.value = $id OR ";
    }
    $str = preg_replace("/OR $/","",$str);

    $qb
      ->leftJoin('u.subscriptions','s2')
      ->leftJoin('s2.subscription_attributes','sa')
      ->andWhere('((s2.expire_date >= :s2ed OR s2.expire_date IS NULL) AND ('.$str.'))')
      ->setParameter('s2ed',date('Y-m-d'));

    return $qb;
  }
}

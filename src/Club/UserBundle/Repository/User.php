<?php

namespace Club\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * User
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class User extends EntityRepository
{
  public function findAllActive()
  {
    $dql =
      "SELECT u,s ".
      "FROM Club\UserBundle\Entity\User u ".
      "JOIN u.subscriptions s ".
      "WHERE s.start_date <= :start AND s.expire_date <= :expire";

    $query = $this->_em->createQuery($dql);
    $query->setParameters(array(
      'start' => date('Y-m-d'),
      'expire' => date('Y-m-d')
    ));

    return $query->getResult();
  }

  public function findNextMemberNumber()
  {
    $dql = "SELECT u FROM Club\UserBundle\Entity\User u ORDER BY u.member_number DESC";

    $query = $this->_em->createQuery($dql);
    $query->setMaxResults(1);

    $r = $query->getResult();

    if (!count($r)) return 1;
    return $r[0]->getMemberNumber()+1;
  }

  public function getUsersListWithPagination($filter, $order_by = array(), $offset = 0, $limit = 0) {
    //Create query builder for languages table
    $qb = $this->getQuery($filter);

    //Show all if offset and limit not set, also show all when limit is 0
    if ((isset($offset)) && (isset($limit))) {
      if ($limit > 0) {
        $qb->setFirstResult($offset);
        $qb->setMaxResults($limit);
      }
      //else we want to display all items on one page
    }
    //Adding defined sorting parameters from variable into query
    foreach ($order_by as $key => $value) {
      $qb->add('orderBy', 'u.' . $key . ' ' . $value);
    }
    //Get our query
    $q = $qb->getQuery($filter);
    //Return result
    return $q->getResult();
  }

  public function getUsersCount($filter) {
    $qb = $this->getQuery($filter);

    $qb->select($qb->expr()->count('u'));
    $q = $qb->getQuery($filter);
    return $q->getSingleScalarResult();
  }

  protected function getQuery($filter)
  {
    $qb = $this->createQueryBuilder('u');

    if ($filter) {
      if (count($filter->getAttributes()) > 0) {
        $qb->leftJoin('u.profile','p');
        $qb->join('p.profile_address','pa');
      }
      foreach ($filter->getAttributes() as $attr) {
        if ($attr->getValue() != '') {
          switch ($attr->getAttribute()->getAttributeName()) {
          case 'min_age':
            $qb->andWhere(
              $qb->expr()->lte('p.day_of_birth',':min_age')
            );
            $qb->setParameter('min_age', date('Y-m-d',mktime(0,0,0,date('n'),date('j'),date('Y')-$attr->getValue())));
            break;
          case 'max_age':
            $qb->andWhere(
              $qb->expr()->gte('p.day_of_birth',':max_age')
            );
            $qb->setParameter('max_age', date('Y-m-d',mktime(0,0,0,date('n'),date('j'),date('Y')-$attr->getValue())));

            break;
          case 'gender':
            $qb->andWhere(
              $qb->expr()->eq('p.gender',':gender')
            );
            $qb->setParameter('gender', $attr->getValue());
            break;
          case 'postal_code':
            $qb->andWhere(
              $qb->expr()->eq('pa.postal_code',':postal_code')
            );
            $qb->setParameter('postal_code', $attr->getValue());
            break;
          case 'city':
            $qb->andWhere(
              $qb->expr()->eq('pa.city',':city')
            );
            $qb->setParameter('city', $attr->getValue());
            break;
          case 'country':
            $qb->andWhere(
              $qb->expr()->eq('pa.country',':country')
            );
            $qb->setParameter('country', $attr->getValue());
            break;
          case 'is_active':
            if ($attr->getValue()) {
              $qb->leftJoin('u.subscriptions','s');
              $qb->andWhere('((s.expire_date >= :eds OR s.expire_date IS NULL) AND s.is_active = :is_active)');
              $qb->setParameter('is_active',$attr->getValue());
              $qb->setParameter('eds',date('Y-m-d'));
            }
            break;
          case 'has_ticket':
            break;
          case 'has_subscription':
            $qb->join('u.subscriptions','s3');
            break;
          case 'location':
            $qb
              ->leftJoin('u.subscriptions','s2')
              ->leftJoin('s2.locations','l1')
              ->andWhere('((s2.expire_date >= :s2ed OR s2.expire_date IS NULL) AND l1.id = :l1id)')
              ->setParameter('s2ed',date('Y-m-d'))
              ->setParameter('l1id',$attr->getValue());

            break;
          }
        }
      }
    }

    return $qb;
  }
}

<?php

namespace Club\TeamBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * TeamRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TeamRepository extends EntityRepository
{
  public function getAllFuture(\Club\TeamBundle\Entity\Team $team)
  {
    $parent = ($team->getTeam()) ? $team->getTeam() : $team;

    return $this->_em->createQueryBuilder()
      ->select('s')
      ->from('ClubTeamBundle:Team','s')
      ->where('s.first_date >= :date')
      ->andWhere('(s.team = :id OR s.id = :id)')
      ->setParameter('date', $team->getFirstDate()->format('Y-m-d H:i:s'))
      ->setParameter('id', $parent->getId())
      ->getQuery()
      ->getResult();
  }

  public function getAllPast(\Club\TeamBundle\Entity\Team $team)
  {
    $parent = ($team->getTeam()) ? $team->getTeam() : $team;

    return $this->_em->createQueryBuilder()
      ->select('s')
      ->from('ClubTeamBundle:Team','s')
      ->where('s.first_date < :date')
      ->andWhere('(s.team = :id OR s.id = :id)')
      ->orderBy('s.first_date')
      ->setParameter('date', $team->getFirstDate()->format('Y-m-d H:i:s'))
      ->setParameter('id', $parent->getId())
      ->getQuery()
      ->getResult();
  }

  public function getAllBetween(\DateTime $start, \DateTime $end, \Club\UserBundle\Entity\User $user=null, \Club\UserBundle\Entity\Location $location=null, \Club\BookingBundle\Entity\Field $field=null)
  {
    $qb = $this->_em->createQueryBuilder()
      ->select('s')
      ->from('ClubTeamBundle:Team','s')
      ->where('(s.first_date <= :start and s.end_date >= :end)')
      ->orWhere('(s.first_date <= :start and s.end_date <= :end and s.end_date >= :start)')
      ->orWhere('(s.first_date >= :start and s.end_date >= :end and s.first_date < :end)')
      ->orWhere('(s.first_date >= :start and s.end_date <= :end and s.end_date >= :start)')
      ->orderBy('s.first_date')
      ->setParameter('start', $start->format('Y-m-d H:i:s'))
      ->setParameter('end', $end->format('Y-m-d H:i:s'));

    if (isset($user)) {
      $qb
        ->leftJoin('s.users', 'u')
        ->andWhere('u.user = :user')
        ->setParameter('user', $user->getId());
    }

    if (isset($location)) {
      $qb
        ->leftJoin('s.location', 'l')
        ->andWhere('l.id = :location')
        ->setParameter('location', $location->getId());
    }

    if (isset($field)) {
      $qb
        ->leftJoin('s.fields', 'f')
        ->andWhere('f.id = :field')
        ->setParameter('field', $field->getId());
    }

    return $qb
      ->getQuery()
      ->getResult();
  }

  public function getAllParent()
  {
    return $this->_em->createQueryBuilder()
      ->select('s')
      ->from('ClubTeamBundle:Team', 's')
      ->where('s.team IS NULL')
      ->getQuery()
      ->getResult();
  }

  public function getPrevTeam(\Club\TeamBundle\Entity\Team $team)
  {
    $parent = ($team->getTeam()) ? $team->getTeam() : $team;

    return $this->_em->createQueryBuilder()
      ->select('s')
      ->from('ClubTeamBundle:Team','s')
      ->where('s.first_date <= :date')
      ->andWhere('(s.id = :id OR s.team = :id)')
      ->setMaxResults(1)
      ->orderBy('s.first_date', 'DESC')
      ->setParameter('date', date('Y-m-d H:i:s'))
      ->setParameter('id', $parent->getId())
      ->getQuery()
      ->getSingleResult();
  }

  public function getNotProcessed()
  {
    return $this->_em->createQueryBuilder()
      ->select('s')
      ->from('ClubTeamBundle:Team','s')
      ->where('s.end_date < CURRENT_TIMESTAMP()')
      ->andWhere('s.processed=0')
      ->getQuery()
      ->getResult();
  }
}

<?php

namespace Club\ShopBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * Order
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Order extends EntityRepository
{
  public function getCount($filter = array())
  {
    $qb = $this->getQueryBuilder($filter);
    return count($qb->getQuery()->getResult());
  }

  public function getWithPagination($filter = array(), $order_by = array(), $offset = 0, $limit = 0) {
    $qb = $this->getQueryBuilder($filter);

    $qb->leftJoin('o.order_status','os')
      ->add('orderBy', 'os.priority, o.id DESC');

    if ((isset($offset)) && (isset($limit))) {
      if ($limit > 0) {
        $qb->setFirstResult($offset);
        $qb->setMaxResults($limit);
      }
    }

    return $qb
      ->getQuery()
      ->getResult();
  }

  private function getQueryBuilder($filter = array())
  {
    $qb = $this->_em->createQueryBuilder()
      ->select('o')
      ->from('ClubShopBundle:Order','o');

    if (isset($filter['order_number'])) {
      $qb = $this->filterOrderNumber($qb,$filter['order_number']);
    }

    return $qb;
  }

  private function filterOrderNumber($qb, $value)
  {
    $qb->andWhere('o.id = :order_number');
    $qb->setParameter('order_number',$value);

    return $qb;
  }

  public function isFirstAccepted(\Club\ShopBundle\Entity\Order $order)
  {
    if (!$order->getOrderStatus()->getAccepted())
      return false;

    foreach ($order->getOrderStatusHistory() as $status) {
      // check if order already has been accepted
      if ($status->getOrderStatus()->getAccepted()) {
        return false;
      }
    }

    return true;
  }

  public function getOpenOrders($limit=10, \Club\UserBundle\Entity\User $user=null)
  {
    $qb = $this->getQueryBuilder()
      ->leftJoin('o.order_status', 'os')
      ->where('os.accepted = 0')
      ->andWhere('os.cancelled = 0')
      ->setMaxResults($limit)
      ->orderBy('o.updated_at', 'DESC');

    if (isset($user)) {
      $qb
        ->andWhere('o.user = :user')
        ->setParameter('user', $user->getId());
    }

    return $qb
      ->getQuery()
      ->getResult();
  }
}
